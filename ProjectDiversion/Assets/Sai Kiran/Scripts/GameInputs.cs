//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Sai Kiran/Scripts/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""LocoMotion"",
            ""id"": ""56fe40d9-384c-4efd-86ec-c7698e62ab45"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""f651ff00-1fe5-49af-840c-be8e8ae4017a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e8e31f61-4793-4aaf-980b-c3834cbc57ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""8b4d37b2-802c-4bb4-b10d-83c2d52d3047"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""db120282-47b1-431e-9f1d-56a055416a8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""7a6885f6-bc10-4933-a8d7-88c25f1eb5dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c0bdc76e-c27f-46d7-96ce-fbadd5f76c8b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21ac3b27-5608-43f1-8c61-be4e02e393bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""590e91e1-8258-431e-9680-c7d275fa8db3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3ad2fef7-b839-40a5-a257-36c57e5d65ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd70462a-7015-49ea-b0d0-42d00a240b09"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""afc5e2c3-231e-41fb-ad3c-31a52f95b7af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f285a657-2140-4c74-b7b0-01e1197a3037"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31f1e51a-364e-4e28-bce2-3b6b3b65caec"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70523a9e-72f3-41fd-a864-229724e9b687"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""a62ce241-0a3c-4b1e-aacd-4621ad3663b6"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard And Mouse"",
            ""bindingGroup"": ""Keyboard And Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LocoMotion
        m_LocoMotion = asset.FindActionMap("LocoMotion", throwIfNotFound: true);
        m_LocoMotion_Movements = m_LocoMotion.FindAction("Movements", throwIfNotFound: true);
        m_LocoMotion_Jump = m_LocoMotion.FindAction("Jump", throwIfNotFound: true);
        m_LocoMotion_Crouch = m_LocoMotion.FindAction("Crouch", throwIfNotFound: true);
        m_LocoMotion_Sprint = m_LocoMotion.FindAction("Sprint", throwIfNotFound: true);
        m_LocoMotion_Mouse = m_LocoMotion.FindAction("Mouse", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LocoMotion
    private readonly InputActionMap m_LocoMotion;
    private ILocoMotionActions m_LocoMotionActionsCallbackInterface;
    private readonly InputAction m_LocoMotion_Movements;
    private readonly InputAction m_LocoMotion_Jump;
    private readonly InputAction m_LocoMotion_Crouch;
    private readonly InputAction m_LocoMotion_Sprint;
    private readonly InputAction m_LocoMotion_Mouse;
    public struct LocoMotionActions
    {
        private @GameInputs m_Wrapper;
        public LocoMotionActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_LocoMotion_Movements;
        public InputAction @Jump => m_Wrapper.m_LocoMotion_Jump;
        public InputAction @Crouch => m_Wrapper.m_LocoMotion_Crouch;
        public InputAction @Sprint => m_Wrapper.m_LocoMotion_Sprint;
        public InputAction @Mouse => m_Wrapper.m_LocoMotion_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_LocoMotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocoMotionActions set) { return set.Get(); }
        public void SetCallbacks(ILocoMotionActions instance)
        {
            if (m_Wrapper.m_LocoMotionActionsCallbackInterface != null)
            {
                @Movements.started -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMovements;
                @Movements.performed -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMovements;
                @Movements.canceled -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMovements;
                @Jump.started -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnCrouch;
                @Sprint.started -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnSprint;
                @Mouse.started -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_LocoMotionActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_LocoMotionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public LocoMotionActions @LocoMotion => new LocoMotionActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    public struct InteractionsActions
    {
        private @GameInputs m_Wrapper;
        public InteractionsActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard And Mouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface ILocoMotionActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
    }
}
